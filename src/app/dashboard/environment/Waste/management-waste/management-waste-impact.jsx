"use client";
import React, { useState, useEffect, useRef } from "react";
import { GlobalState } from "../../../../../Context/page";
import Form from "@rjsf/core";
import validator from "@rjsf/validator-ajv8";
import TextareaWidget2 from "../../../../shared/widgets/Textarea/TextareaWidget2";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Oval } from "react-loader-spinner";
import axiosInstance from "@/app/utils/axiosMiddleware";
import RadioWidget3 from "../../../../shared/widgets/Input/radioWidget3";
const widgets = {
  TextareaWidgetnew: TextareaWidget2,
  RadioWidget: RadioWidget3,
};

const view_path = "gri-environment-waste-306-2-management_of_significant_waste";
const client_id = 1;
const user_id = 1;

const schema = {
  type: "array",
  items: {
    type: "object",
    properties: {
      Q1: {
        type: "string",
        format: "textarea",
      },
      Q2: {
        type: "string",
        format: "textarea",
      },
      Q3: {
        type: "string",
        enum: ["Yes", "No"],
      },
      Q5: {
        type: "string",
        format: "textarea",
      },
    },
    dependencies: {
      Q3: {
        oneOf: [
          {
            properties: {
              Q3: {
                enum: ["Yes"],
              },
              Q4: {
                type: "string",
                format: "textarea",
              },
            },
          },
        ],
      },
    },
  },
};

const uiSchema = {
  items: {
    "ui:order": ["Q1", "Q2", "Q3", "Q4", "Q5"],
    Q1: {
      "ui:hadding": "Actions taken to prevent waste generation",
      "ui:title":
        "Describe actions taken (including circularity measures) to prevent waste generation from organization's own activities and upstream activities and downstream activities in its value chain.",
      "ui:tooltipshadding":
        "This section documents data corresponding to the actions taken to prevet waste generation from organization’s own activities and upstream and downstream in its value chain.",
      "ui:tooltipstitle":
        "<p>Specify the actions taken to prevent waste generation from organisation's own activities and upstream activities and downstream activities.</p> <p>Include: Actions mentioned should include actions including circularity measures. </p> <p> Circularity measures: measures taken to retain the value of products, materials, and resources and redirect them back to use for as long as possible with the lowest carbon and resource footprint possible, such that fewer raw materials and resources are extracted and waste generation is prevented.</p> ",
      "ui:haddingdisplay": "block",
      "ui:titlediplay": "block",
      "ui:haddingtooltipdisplay": "block",
      "ui:titletooltipdisplay": "block",
      "ui:Gri": "GRI 306-2a",
      "ui:widget": "TextareaWidgetnew",
      "ui:options": {
        label: false,
      },
    },
    Q2: {
      "ui:hadding":
        "Actions taken to manage significant impacts from waste generated",
      "ui:title":
        "Describe the actions taken (including circularity measures) to manage significant impacts from waste generated by the organization’s own activities and upstream and downstream activities within its value chain.",
      "ui:tooltipshadding":
        "This section documents data corresponding to the actions taken to manage significant impacts from waste generated by the organization’s own activities and upstream and downstream in its value chain.",
      "ui:tooltipstitle":
        "<p>Specify the actions taken to manage significant impacts from waste generated from organisation's own activities and upstream activities and downstream activities.</p><p>Include: Actions mentioned should include actions including circularity measures.  </p>",
      "ui:haddingdisplay": "block",
      "ui:titlediplay": "block",
      "ui:haddingtooltipdisplay": "block",
      "ui:titletooltipdisplay": "block",
      "ui:Gri": "GRI 306-2a",
      "ui:widget": "TextareaWidgetnew",
      "ui:options": {
        label: false,
      },
    },
    Q3: {
      "ui:hadding": "Waste Management by Third-party",
      "ui:title":
        "Is the waste generated by your organization's activities managed by a third party?",
      "ui:tooltipshadding":
        "This section documents the data corresponding to the waste generated by the organization in its own activities is managed by a third party.",
      "ui:tooltipstitle":
        "Please indicate if the waste generated by the organisation's activities is managed by a third party or by the organisation itself or managed by both.",
      "ui:haddingdisplay": "block",
      "ui:titlediplay": "block",
      "ui:haddingtooltipdisplay": "block",
      "ui:titletooltipdisplay": "block",
      "ui:widget": "RadioWidget",
      "ui:Gri": "GRI 306-2b",
      "ui:horizontal": true,
      "ui:options": {
        label: false,
      },
    },
    Q4: {
      "ui:hadding": "Waste Management by Third-party",
      "ui:title":
        "If yes,  Describe the processes used to determine whether the third party manages the waste in line with contractual or legislative obligations.",
      "ui:tooltipshadding":
        "This section documents the data corresponding to the waste waste generated by the organization in its own activities is managed by a third party. ",
      "ui:tooltipstitle":
        "<p>Third-party: Third party includes a public or private waste management organization, or any other entity or group of individuals formally or informally involved in handling the reporting organization’s waste.</p> <p>Include: Agreements in a contract for the third party to follow when managing its waste, or rely on existing legislative obligations, such as local environmental laws and regulations.  </p>",
      "ui:haddingdisplay": "block",
      "ui:titlediplay": "block",
      "ui:haddingtooltipdisplay": "block",
      "ui:titletooltipdisplay": "block",
      "ui:Gri": "GRI 306-2b",
      "ui:widget": "TextareaWidgetnew",
      "ui:options": {
        label: false,
      },
    },
    Q5: {
      "ui:hadding": "Waste-related data management",
      "ui:title":
        "Describe the processes used to collect and monitor waste-related data",
      "ui:tooltipshadding":
        "This section documents the data corresponding to the processes used to collect and monitor waste-related data.",
      "ui:tooltipstitle":
        "<p>Please specify the processes used to collect and monitor waste-related data.</p> <p>Include: Processes can include online data entry, maintaining a centralized database, real-time weighbridge measurement, and annual external data validation.</p>",
      "ui:haddingdisplay": "block",
      "ui:titlediplay": "block",
      "ui:haddingtooltipdisplay": "block",
      "ui:titletooltipdisplay": "block",
      "ui:Gri": "GRI 306-2c",
      "ui:widget": "TextareaWidgetnew",
      "ui:options": {
        label: false,
      },
    },
    "ui:options": {
      orderable: false,
      addable: false,
      removable: false,
      layout: "horizontal",
    },
  },
};

const Managementwasteimpact = ({ selectedOrg, year, selectedCorp,togglestatus }) => {
  const { open } = GlobalState();
  const [formData, setFormData] = useState([{}]);
  const [r_schema, setRemoteSchema] = useState({});
  const [r_ui_schema, setRemoteUiSchema] = useState({});
  const [loopen, setLoOpen] = useState(false);
  const toastShown = useRef(false);

  const LoaderOpen = () => {
    setLoOpen(true);
  };
  const LoaderClose = () => {
    setLoOpen(false);
  };
  const handleChange = (e) => {
    let newFormData = { ...e.formData[0] };
    if (newFormData.Q3 === "No") {
      newFormData.Q4 = "";
    }
    setFormData([newFormData]);
  };

  // The below code on updateFormData

  const updateFormData = async () => {
    LoaderOpen();
    const data = {
      client_id: client_id,
      user_id: user_id,
      path: view_path,
      form_data: formData,
      corporate: selectedCorp,
      organisation: selectedOrg,
      year,
    };

    const url = `${process.env.BACKEND_API_URL}/datametric/update-fieldgroup`;
    try {
      const response = await axiosInstance.post(url, data);

      if (response.status === 200) {
        toast.success("Data added successfully", {
          position: "top-right",
          autoClose: 3000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
        LoaderClose();
        loadFormData();
      } else {
        toast.error("Oops, something went wrong", {
          position: "top-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "colored",
        });
        LoaderClose();
      }
    } catch (error) {
      toast.error("Oops, something went wrong", {
        position: "top-right",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "colored",
      });
      LoaderClose();
    }
  };

  const loadFormData = async () => {
    LoaderOpen();
    setFormData([{}]);
    const url = `${process.env.BACKEND_API_URL}/datametric/get-fieldgroups?path_slug=${view_path}&client_id=${client_id}&user_id=${user_id}&corporate=${selectedCorp}&organisation=${selectedOrg}&year=${year}`;
    try {
      const response = await axiosInstance.get(url);
      console.log("API called successfully:", response.data);
      setRemoteSchema(response.data.form[0].schema);
      setRemoteUiSchema(response.data.form[0].ui_schema);
      const form_parent = response.data.form_data;
      setFormData(form_parent[0].data);
    } catch (error) {
      console.error("API call failed:", error);
    } finally {
      LoaderClose();
    }
  };
  //Reloading the forms -- White Beard
  useEffect(() => {
    //console.long(r_schema, '- is the remote schema from django), r_ui_schema, '- is the remote ui schema from django')
  }, [r_schema, r_ui_schema]);

  // console log the form data change
  useEffect(() => {
    console.log("Form data is changed -", formData);
  }, [formData]);

  useEffect(() => {
    if (selectedOrg && year && togglestatus) {
      if (togglestatus === "Corporate" && selectedCorp) {
        loadFormData();
      } else if (togglestatus === "Corporate" && !selectedCorp) {
        setFormData([{}]);
        setRemoteSchema({});
        setRemoteUiSchema({});
      } else {
        loadFormData();
      }

      toastShown.current = false;
    } else {
      if (!toastShown.current) {
        toastShown.current = true;
      }
    }
  }, [selectedOrg, year, selectedCorp, togglestatus]);

  // Add validation state
  const [validationErrors, setValidationErrors] = useState([]);

  // Add validation function
  const validateRows = (data) => {
    return data.map((row) => {
      const rowErrors = {};

      // Validate Q1
      if (!row.Q1 || row.Q1.trim() === "") {
        rowErrors.Q1 = "Actions to prevent waste generation is required";
      }

      // Validate Q2
      if (!row.Q2 || row.Q2.trim() === "") {
        rowErrors.Q2 = "Actions to manage significant impacts is required";
      }

      // Validate Q3
      if (!row.Q3) {
        rowErrors.Q3 = "Please select Yes or No";
      }

      // Validate Q4 only if Q3 is "Yes"
      if (row.Q3 === "Yes" && (!row.Q4 || row.Q4.trim() === "")) {
        rowErrors.Q4 = "Third party management process description is required";
      }

      // Validate Q5
      if (!row.Q5 || row.Q5.trim() === "") {
        rowErrors.Q5 = "Data collection process description is required";
      }

      return rowErrors;
    });
  };

  // Add renderError helper
  const renderError = (rowIndex, fieldName) => {
    const rowErrors = validationErrors[rowIndex] || {};
    return rowErrors[fieldName] ? (
      <div className="text-red-500 text-sm mt-1">{rowErrors[fieldName]}</div>
    ) : null;
  };

  // Modify handleSubmit
  const handleSubmit = (e) => {
    e.preventDefault();
    const errors = validateRows(formData);
    setValidationErrors(errors);

    const hasErrors = errors.some(
      (rowErrors) => Object.keys(rowErrors).length > 0
    );
    if (!hasErrors) {
      updateFormData();
    }
  };

  return (
    <>
      <div>
        <div>
          <Form
            schema={r_schema}
            uiSchema={r_ui_schema}
            formData={formData}
            onChange={handleChange}
            validator={validator}
            widgets={widgets}
            formContext={{ validationErrors }}
          />
        </div>
        {loopen && (
          <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
            <Oval
              height={50}
              width={50}
              color="#00BFFF"
              secondaryColor="#f3f3f3"
              strokeWidth={2}
              strokeWidthSecondary={2}
            />
          </div>
        )}
      </div>
      <div className="mb-4">
          <button
            type="button"
            className={`text-center py-1 text-sm w-[100px] bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:shadow-outline float-end ${
              (!selectedCorp && togglestatus === "Corporate") ||
              !selectedOrg ||
              !year
                ? "cursor-not-allowed opacity-90"
                : ""
            }`}
            onClick={handleSubmit}
            disabled={
              (togglestatus === "Corporate" && !selectedCorp) ||
              (togglestatus !== "Corporate" && (!selectedOrg || !year))
            }
          >
            Submit
          </button>
        </div>
    </>
  );
};

export default Managementwasteimpact;
